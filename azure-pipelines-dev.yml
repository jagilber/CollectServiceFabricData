# used for internal ado builds

name: ADO CI CollectSFData-Dev

trigger:
  branches:
    include:
    - 'dev*'

pool:
  vmImage: 'windows-latest'

variables:
  project_name: CollectSFData
  project_root: .\src
  start_time: $[format('{0}-{1:yyyy}{1:MM}{1:dd}-{1:HH}{1:mm}{1:ss}', variables['project_name'], pipeline.startTime)]
  artifacts_drive: Z
  artifacts_share_target: 'Z:\$(System.DefinitionName)\$(System.JobId)\$(start_time)'
  system.debug: true
  buildConfiguration: debug
  release_path: $(System.DefaultWorkingDirectory)/src/bin/$(buildConfiguration)
  release_stage_path: $(release_path)/signed
  esrp_signing_connection: 'collectsfdata esrp signing connection'

steps:
- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: CollectServiceFabricData

- task: NuGetToolInstaller@1 # Optional if nuget.exe >= 4.8.5385 is already on the path
  inputs:
    versionSpec: '*'
    checkLatest: true

- task: PowerShell@2
  displayName: 'agent environment'
  inputs:
    targetType: 'inline'
    script: |
      [environment]::getEnvironmentVariables().getEnumerator()|sort Name
      dotnet --info
      dotnet nuget locals all --clear
      # test
      dotnet restore .\src --configfile ./nuget.config --force -v d
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: NuGetCommand@2
  displayName: 'nuget restore'
  inputs:
    command: 'restore'
    restoreSolution: '$(project_root)/$(project_name).sln'
    includeNuGetOrg: true
    feedsToUse: 'config'
    nugetConfigPath: './nuget.config'
    noCache: false
    verbosityRestore: 'Detailed'

- task: CodeQL3000Init@0
  displayName: 'codeql init'
  inputs:
    Enabled: true
    AnalyzeInPipeline: false
    PublishDatabase: true
    PublishDatabaseLog: true
    Language: csharp,powershell
    Cadence: 72 # 72 hours default, use 0 for debug
    LogLevel: 4

- task: PowerShell@2
  displayName: 'dotnet build'
  inputs:
    targetType: 'inline'
    script: |
      write-host "dotnet build `"$env:project_root\$env:project_name\$env:project_name.csproj`" -v detailed -c $env:buildConfiguration"
      dotnet build "$env:project_root\$env:project_name\$env:project_name.csproj" -v detailed -c $env:buildConfiguration
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: ManifestGeneratorTask@0
  displayName: 'manifest generation'
  inputs:
    BuildDropPath: $(release_path)
    Verbosity: Verbose
    PackageName: CollectSFData

- task: CodeQL3000Finalize@0
  displayName: 'codeql finalize'
  condition: always()
  continueOnError: true

- task: CredScan@3
  displayName: 'cred scan'
  inputs:
    verboseOutput: true

- task: AntiMalware@4
  displayName: 'anti-malware'
  inputs:
    InputType: 'Basic'
    ScanType: 'CustomScan'
    FileDirPath: '$(Build.StagingDirectory)'
    TreatSignatureUpdateFailureAs: 'Warning'
    SignatureFreshness: 'UpToDate'
    TreatStaleSignatureAs: 'Error'

- task: ComponentGovernanceComponentDetection@0
  displayName: 'component governance'
  inputs:
    scanType: Register
    verbosity: Verbose
    alertWarningLevel: High

- task: PowerShell@2
  displayName: 'unpack nupkg for binary signing'
  inputs:
    targetType: 'inline'
    script: |
      $nupkg = @(get-childItem -recurse "$($env:release_path)\*.nupkg")[0].FullName
      $nupkgZip = "$nupkg.zip"
      write-host "nupkg=$nupkg"
      $nupkgDir = "$($env:release_stage_path)"
      write-host "mkdir $nupkgDir"
      mkdir $nupkgDir
      copy $nupkg $nupkgZip
      write-host "expand-archive -path $nupkgZip -destinationPath $nupkgDir -force"
      expand-archive -path $nupkgZip -destinationPath $nupkgDir -force
      write-host "dir $nupkgDir -recurse"
      dir $nupkgDir -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: PowerShell@2
  displayName: 'dotnet build output'
  inputs:
    targetType: 'inline'
    script: dir .. -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

# https://aka.ms/esrp
- task: EsrpCodeSigning@4
  displayName: 'dll and exe code signing'
  inputs:
    ConnectedServiceName: $(esrp_signing_connection)
    FolderPath: '$(release_stage_path)'
    Pattern: 'sf.tx.*.dll,*$(project_name)*.dll,$(project_name).exe'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
        {
            "KeyCode": "CP-230012",
            "OperationCode": "SigntoolSign",
            "Parameters": {
              "OpusName": "Microsoft",
              "OpusInfo": "http://www.microsoft.com",
              "FileDigest": "/fd \"SHA256\"",
              "PageHash": "/NPH",
              "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
            "ToolName": "sign",
            "ToolVersion": "1.0"
          },
          {
            "KeyCode": "CP-230012",
            "OperationCode": "SigntoolVerify",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
          }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
    PendingAnalysisWaitTimeoutMinutes: '5'
    VerboseLogin: true

- task: PowerShell@2
  displayName: 'repack nupkg with signed binaries'
  inputs:
    targetType: 'inline'
    script: |
      $nupkg = @(get-childItem -recurse "$($env:release_path)\*.nupkg")[0].FullName
      $nupkgZip = "$nupkg.zip"
      $nupkgUnsigned = "$nupkg".replace(".nupkg", ".unsigned.nupkg")
      write-host "nupkg=$nupkg"
      $nupkgDir = "$($env:release_stage_path)"
      del "$nupkgDir\CodeSignSummary*.md" -force
      ren $nupkg $nuPkgUnsigned
      del $nupkgZip -force
      write-host "compress-archive -path $nupkgDir\* -destinationPath $nupkgZip -force"
      compress-archive -path $nupkgDir\* -destinationPath $nupkgZip -force
      rd $nupkgDir -recurse -force
      md $nupkgDir
      move $nupkgZip $nupkg -force
      move *.nupkg $nupkgDir -force
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: EsrpCodeSigning@4
  displayName: 'nupkg code signing'
  inputs:
    ConnectedServiceName: $(esrp_signing_connection)
    FolderPath: '$(release_path)'
    Pattern: '*.nupkg'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
        {
            "KeyCode": "CP-401405",
            "OperationCode": "NuGetSign",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
          },
          {
            "KeyCode": "CP-401405",
            "OperationCode": "NuGetVerify",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
          }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
    PendingAnalysisWaitTimeoutMinutes: '5'
    VerboseLogin: true

- task: PowerShell@2
  displayName: 'create zip with signed files'
  inputs:
    targetType: 'inline'
    script: |
      $source = "$($env:release_path)\\*"
      $destination = "$($env:release_path)\\$($env:project_name).zip"
      write-host "compress-archive -path $source -destinationPath $destination -force"
      compress-archive -path $source -destinationPath $destination -force
      $exeFileRef = @(get-childItem -recurse "$($env:release_path)\$($env:project_name).exe")[0].FullName
      $fileVersion = [io.fileinfo]::new($exeFileRef).VersionInfo.FileVersion
      write-host "fileVersion=$fileVersion"
      #echo "file_version=v$fileVersion" >> $env:GITHUB_OUTPUT
      write-host "dir $env:release_path -recurse"
      dir $env:release_path -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: PowerShell@2
  displayName: 'dotnet signed build output'
  inputs:
    targetType: 'inline'
    script: dir .. -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: PowerShell@2
  displayName: 'copy artifacts'
  inputs:
    targetType: 'inline'
    script: |
      [environment]::getEnvironmentVariables().getEnumerator()|sort Name
      write-host "test-netConnection -computerName $env:mapped_artifacts_storage_uri -Port 445 -informationLevel detailed"
      $connectTestResult = test-netConnection -computerName $env:mapped_artifacts_storage_uri -Port 445 -informationLevel detailed
      if ($connectTestResult.tcpTestSucceeded) {
          $securePassword = ConvertTo-SecureString -String $env:mapped_artifacts_pass -Force -AsPlainText
          $credentials = [psCredential]::new($env:mapped_artifacts_user, $securePassword)
          write-host "new-psDrive -name $drive -psProvider fileSystem -root "$env:mapped_artifacts_share" -credential $credentials"
          new-psDrive -name $env:artifacts_drive -psProvider fileSystem -root "$env:mapped_artifacts_share" -credential $credentials -scope global
      } else {
          write-error -message "Unable to reach the azure storage account via port 445."
      }
      if(!(test-path $env:artifacts_share_target))
      {
        write-host "mkdir "$env:artifacts_share_target""
        mkdir "$env:artifacts_share_target"
      }
      write-host "copy $env:release_path "$env:artifacts_share_target" -recurse"
      copy $env:release_path "$env:artifacts_share_target" -recurse
      write-host "copy $env:artifacts_directory $env:artifacts_share_target -recurse"
      copy $env:artifacts_directory "$env:artifacts_share_target" -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'
  env:
    mapped_artifacts_storage_uri: $(artifacts_storage_uri)
    mapped_artifacts_user: $(artifacts_user)
    mapped_artifacts_pass: $(artifacts_pass)
    mapped_artifacts_share: $(artifacts_share)
    artifacts_directory: $(System.ArtifactsDirectory)

- task: PublishPipelineArtifact@1
  displayName: 'publish artifacts'
  inputs:
    targetPath:  $(release_stage_path)
    artifactName: build-$(start_time)-$(system.JobId)

- task: PublishPipelineArtifact@1
  displayName: 'publish codeql'
  inputs:
    targetPath: $(System.ArtifactsDirectory)
    artifactName: artifacts-$(start_time)-$(system.JobId)

# - task: DownloadPipelineArtifact@2
#   inputs:
#     buildType: 'current'
#     artifactName: 'artifacts-$(start_time)-$(system.JobId)'
#     targetPath: '$(artifacts_share_target)'
#     allowPartiallySucceededBuilds: true
#     allowFailedBuilds: true

- task: NuGetCommand@2
  displayName: 'nuget push'
  inputs:
    command: 'push'
    packagesToPush: '$(release_path)/*.nupkg'
    nuGetFeedType: 'internal'
    feedsToUse: 'config'
    nugetConfigPath: './nuget.config'
    noCache: false
    verbosityRestore: 'Detailed'
