# used for internal ado builds

name: ADO CI CollectSFData-Dev

trigger:
  branches:
    include:
    - 'dev*'

pool:
  vmImage: 'windows-latest'

variables:
  project_name: CollectSFData
  project_root: .\src
  start_time: $[format('{0}-{1:yyyy}{1:MM}{1:dd}-{1:HH}{1:mm}{1:ss}', variables['project_name'], pipeline.startTime)]
  artifacts_drive: Z
  artifacts_share_target: 'Z:\$(System.DefinitionName)\$(System.JobId)\$(start_time)'
  system.debug: true
  buildConfiguration: debug

steps:
- task: PowerShell@2
  displayName: 'agent environment'
  inputs:
    targetType: 'inline'
    script: |
      [environment]::getEnvironmentVariables().getEnumerator()|sort Name
      dotnet --info
      dotnet nuget locals all --clear
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(project_root)/$(project_name).sln'
    feedsToUse: 'config'
    nugetConfigPath: './nuget.config'
    noCache: false
    verbosityRestore: 'Detailed'

- task: CodeQL3000Init@0
  inputs:
    Enabled: true
    AnalyzeInPipeline: false
    PublishDatabase: true
    PublishDatabaseLog: true
    Language: csharp,powershell
    Cadence: 72 # 72 hours default, use 0 for debug
    LogLevel: 4

- task: PowerShell@2
  displayName: 'dotnet build'
  inputs:
    targetType: 'inline'
    script: |
      write-host "dotnet build `"$env:project_root\$env:project_name\$env:project_name.csproj`" -v detailed -c $env:buildConfiguration"
      dotnet build "$env:project_root\$env:project_name\$env:project_name.csproj" -v detailed -c $env:buildConfiguration
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: ManifestGeneratorTask@0
  inputs:
    BuildDropPath: $(System.DefaultWorkingDirectory)/src/bin/$(buildConfiguration)
    Verbosity: Verbose
    PackageName: CollectSFData

- task: CodeQL3000Finalize@0
  condition: always()
  continueOnError: true

- task: CredScan@3
  inputs:
    verboseOutput: true

- task: AntiMalware@4
  inputs:
    InputType: 'Basic'
    ScanType: 'CustomScan'
    FileDirPath: '$(Build.StagingDirectory)'
    TreatSignatureUpdateFailureAs: 'Warning'
    SignatureFreshness: 'UpToDate'
    TreatStaleSignatureAs: 'Error'

- task: ComponentGovernanceComponentDetection@0
  inputs:
    scanType: Register
    verbosity: Verbose
    alertWarningLevel: High

- task: PowerShell@2
  displayName: 'dotnet build output'
  inputs:
    targetType: 'inline'
    script: dir .. -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath:  $(System.DefaultWorkingDirectory)/src/bin/$(buildConfiguration)
    artifactName: build-$(start_time)-$(system.JobId)

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(System.ArtifactsDirectory)
    artifactName: artifacts-$(start_time)-$(system.JobId)

- task: PowerShell@2
  displayName: 'copy artifacts'
  inputs:
    targetType: 'inline'
    script: |
      [environment]::getEnvironmentVariables().getEnumerator()|sort Name
      write-host "test-netConnection -computerName $env:mapped_artifacts_storage_uri -Port 445 -informationLevel detailed"
      $connectTestResult = test-netConnection -computerName $env:mapped_artifacts_storage_uri -Port 445 -informationLevel detailed
      if ($connectTestResult.tcpTestSucceeded) {
          $securePassword = ConvertTo-SecureString -String $env:mapped_artifacts_pass -Force -AsPlainText
          $credentials = [psCredential]::new($env:mapped_artifacts_user, $securePassword)
          write-host "new-psDrive -name $drive -psProvider fileSystem -root "$env:mapped_artifacts_share" -credential $credentials"
          new-psDrive -name $env:artifacts_drive -psProvider fileSystem -root "$env:mapped_artifacts_share" -credential $credentials -scope global
      } else {
          write-error -message "Unable to reach the azure storage account via port 445."
      }
      if(!(test-path $env:artifacts_share_target))
      {
        write-host "mkdir "$env:artifacts_share_target""
        mkdir "$env:artifacts_share_target"
      }
      write-host "copy $(System.DefaultWorkingDirectory)/src/bin/$(buildConfiguration) "$env:artifacts_share_target" -recurse"
      copy $(System.DefaultWorkingDirectory)/src/bin/$(buildConfiguration) "$env:artifacts_share_target" -recurse
      write-host "copy $(System.ArtifactsDirectory) "$env:artifacts_share_target" -recurse"
      copy $(System.ArtifactsDirectory) "$env:artifacts_share_target" -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'
  env:
    mapped_artifacts_storage_uri: $(artifacts_storage_uri)
    mapped_artifacts_user: $(artifacts_user)
    mapped_artifacts_pass: $(artifacts_pass)
    mapped_artifacts_share: $(artifacts_share)

# - task: DownloadPipelineArtifact@2
#   inputs:
#     buildType: 'current'
#     artifactName: 'artifacts-$(start_time)-$(system.JobId)'
#     targetPath: '$(artifacts_share_target)'
#     allowPartiallySucceededBuilds: true
#     allowFailedBuilds: true
