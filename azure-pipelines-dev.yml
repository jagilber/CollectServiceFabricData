# used for internal ado builds

name: ADO CI CollectSFData

trigger:
  branches:
    include:
    - 'dev*'

pool:
  vmImage: 'windows-latest'

variables:
  project_name: CollectSFData
  project_root: .\src
  start_time: $[format('{0}-{1:yyyy}{1:MM}{1:dd}-{1:HH}{1:mm}{1:ss}', variables['project_name'], pipeline.startTime)]
  artifacts_drive: Z
  artifacts_share_target: Z:\$(System.TeamProject)/$(System.DefinitionName)/$(System.JobId)
  artifacts_storage_uri_fileshare: /artifacts
  System.Debug: true
  buildConfiguration: Release
  Codeql.PublishDatabaseLog: true
  # testing
  Codeql.Cadence: 0
  Codeql.LogLevel: 5
  Codeql.Language: csharp,powershell
  Codeql.PublishDatabase: true

steps:
- task: PowerShell@2
  displayName: 'agent environment'
  inputs:
    targetType: 'inline'
    script: |
      [environment]::getenvironmentvariables().getenumerator()|sort Name
      dotnet --info
      dotnet nuget locals all --clear
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(project_root)/$(project_name).sln'
    feedsToUse: 'config'
    nugetConfigPath: './nuget.config'
    noCache: false
    verbosityRestore: 'Detailed'

- task: CodeQL3000Init@0
  inputs:
    Enabled: true
    AnalyzeInPipeline: true

- task: PowerShell@2
  displayName: 'dotnet build'
  inputs:
    targetType: 'inline'
    script: |
      write-host "dotnet build `"$env:project_root\$env:project_name\$env:project_name.csproj`" -v detailed -c $env:buildConfiguration"
      dotnet build "$env:project_root\$env:project_name\$env:project_name.csproj" -v detailed -c $env:buildConfiguration
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: ManifestGeneratorTask@0
  inputs:
    BuildDropPath: $(System.DefaultWorkingDirectory)/src/bin/$(buildConfiguration)
    Verbosity: Verbose
    PackageName: CollectSFData

- task: CodeQL3000Finalize@0
  condition: always()
  continueOnError: true

- task: CredScan@3
  inputs:
    verboseOutput: true

- task: AntiMalware@4
  inputs:
    InputType: 'Basic'
    ScanType: 'CustomScan'
    FileDirPath: '$(Build.StagingDirectory)'
    TreatSignatureUpdateFailureAs: 'Warning'
    SignatureFreshness: 'UpToDate'
    TreatStaleSignatureAs: 'Error'

- task: ComponentGovernanceComponentDetection@0
  inputs:
    scanType: Register
    verbosity: Verbose
    alertWarningLevel: High

- task: PowerShell@2
  displayName: 'dotnet build output'
  inputs:
    targetType: 'inline'
    script: dir .. -recurse
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath:  $(System.DefaultWorkingDirectory)/src/bin/$(buildConfiguration)
    artifactName: build-$(start_time)-$(system.JobId)

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(System.ArtifactsDirectory)
    artifactName: artifacts-$(start_time)-$(system.JobId)

## not working
- task: PowerShell@2
  displayName: 'map artifacts drive'
  inputs:
    targetType: 'inline'
    script: |
      [environment]::getenvironmentvariables().getenumerator()|sort Name
      write-host "Test-NetConnection -ComputerName $env:mapped_artifacts_storage_uri -Port 445 -informationLevel Detailed"
      $connectTestResult = Test-NetConnection -ComputerName $env:mapped_artifacts_storage_uri -Port 445 -informationLevel Detailed
      if ($connectTestResult.TcpTestSucceeded) {
          # Save the password so the drive will persist on reboot
          write-host "cmd.exe /C cmdkey /add:`"$env:mapped_artifacts_storage_uri/$env:artifacts_storage_uri_fileshare`" /user:`"$env:mapped_artifacts_user`" /pass:`"$env:mapped_artifacts_pass`""
          cmd.exe /C "cmdkey /add:`"$env:mapped_artifacts_storage_uri/$env:artifacts_storage_uri_fileshare`" /user:`"$env:mapped_artifacts_user`" /pass:`"$env:mapped_artifacts_pass`""
          # Mount the drive
          New-PSDrive -Name $env:artifacts_drive -PSProvider FileSystem -Root "$env:mapped_artifacts_share" -Persist
      } else {
          Write-Error -Message "Unable to reach the Azure storage account via port 445. Check to make sure your organization or ISP is not blocking port 445, or use Azure P2S VPN, Azure S2S VPN, or Express Route to tunnel SMB traffic over a different port."
      }
      mkdir "$env:artifacts_share_target"
    errorActionPreference: 'continue'
    verbosePreference: 'continue'
    debugPreference: 'continue'
  env:
    mapped_artifacts_storage_uri: $(artifacts_storage_uri)
    mapped_artifacts_user: $(artifacts_user)
    mapped_artifacts_pass: $(artifacts_pass)
    mapped_artifacts_share: $(artifacts_share)

- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'current'
    artifactName: 'artifacts-$(start_time)-$(system.JobId)'
    targetPath: '$(artifacts_share_target)'
